// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MSGTYPES_VSMN_H_
#define FLATBUFFERS_GENERATED_MSGTYPES_VSMN_H_

#include "flatbuffers/flatbuffers.h"

namespace vsmn {

struct RequestMsg;
struct RequestMsgBuilder;

enum class RequestType : uint8_t {
  CONNECT = 0,
  MIN = CONNECT,
  MAX = CONNECT
};

inline const RequestType (&EnumValuesRequestType())[1] {
  static const RequestType values[] = {
    RequestType::CONNECT
  };
  return values;
}

inline const char * const *EnumNamesRequestType() {
  static const char * const names[2] = {
    "CONNECT",
    nullptr
  };
  return names;
}

inline const char *EnumNameRequestType(RequestType e) {
  if (flatbuffers::IsOutRange(e, RequestType::CONNECT, RequestType::CONNECT)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesRequestType()[index];
}

struct RequestMsg FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestMsgBuilder Builder;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "vsmn.RequestMsg";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4
  };
  vsmn::RequestType type() const {
    return static_cast<vsmn::RequestType>(GetField<uint8_t>(VT_TYPE, 0));
  }
  bool mutate_type(vsmn::RequestType _type) {
    return SetField<uint8_t>(VT_TYPE, static_cast<uint8_t>(_type), 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_TYPE) &&
           verifier.EndTable();
  }
};

struct RequestMsgBuilder {
  typedef RequestMsg Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(vsmn::RequestType type) {
    fbb_.AddElement<uint8_t>(RequestMsg::VT_TYPE, static_cast<uint8_t>(type), 0);
  }
  explicit RequestMsgBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<RequestMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestMsg>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestMsg> CreateRequestMsg(
    flatbuffers::FlatBufferBuilder &_fbb,
    vsmn::RequestType type = vsmn::RequestType::CONNECT) {
  RequestMsgBuilder builder_(_fbb);
  builder_.add_type(type);
  return builder_.Finish();
}

}  // namespace vsmn

#endif  // FLATBUFFERS_GENERATED_MSGTYPES_VSMN_H_
