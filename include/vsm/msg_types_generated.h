// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MSGTYPES_VSM_H_
#define FLATBUFFERS_GENERATED_MSGTYPES_VSM_H_

#include "flatbuffers/flatbuffers.h"

namespace vsm {

struct Vector2;

struct NodeInfo;
struct NodeInfoBuilder;

struct Message;
struct MessageBuilder;

struct State;
struct StateBuilder;

enum class SyncMode : uint8_t {
  AUTHORITY = 0,
  LATEST = 1,
  NEAREST = 2,
  CUSTOM = 3,
  MIN = AUTHORITY,
  MAX = CUSTOM
};

inline const SyncMode (&EnumValuesSyncMode())[4] {
  static const SyncMode values[] = {
    SyncMode::AUTHORITY,
    SyncMode::LATEST,
    SyncMode::NEAREST,
    SyncMode::CUSTOM
  };
  return values;
}

inline const char * const *EnumNamesSyncMode() {
  static const char * const names[5] = {
    "AUTHORITY",
    "LATEST",
    "NEAREST",
    "CUSTOM",
    nullptr
  };
  return names;
}

inline const char *EnumNameSyncMode(SyncMode e) {
  if (flatbuffers::IsOutRange(e, SyncMode::AUTHORITY, SyncMode::CUSTOM)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSyncMode()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vector2 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;

 public:
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "vsm.Vector2";
  }
  Vector2() {
    memset(static_cast<void *>(this), 0, sizeof(Vector2));
  }
  Vector2(float _x, float _y)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  void mutate_x(float _x) {
    flatbuffers::WriteScalar(&x_, _x);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  void mutate_y(float _y) {
    flatbuffers::WriteScalar(&y_, _y);
  }
};
FLATBUFFERS_STRUCT_END(Vector2, 8);

struct NodeInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef NodeInfoBuilder Builder;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "vsm.NodeInfo";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_ADDRESS = 6,
    VT_COORDINATES = 8,
    VT_TIMESTAMP = 10
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  flatbuffers::String *mutable_name() {
    return GetPointer<flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *address() const {
    return GetPointer<const flatbuffers::String *>(VT_ADDRESS);
  }
  flatbuffers::String *mutable_address() {
    return GetPointer<flatbuffers::String *>(VT_ADDRESS);
  }
  bool KeyCompareLessThan(const NodeInfo *o) const {
    return *address() < *o->address();
  }
  int KeyCompareWithValue(const char *val) const {
    return strcmp(address()->c_str(), val);
  }
  const vsm::Vector2 *coordinates() const {
    return GetStruct<const vsm::Vector2 *>(VT_COORDINATES);
  }
  vsm::Vector2 *mutable_coordinates() {
    return GetStruct<vsm::Vector2 *>(VT_COORDINATES);
  }
  uint32_t timestamp() const {
    return GetField<uint32_t>(VT_TIMESTAMP, 0);
  }
  bool mutate_timestamp(uint32_t _timestamp) {
    return SetField<uint32_t>(VT_TIMESTAMP, _timestamp, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffsetRequired(verifier, VT_ADDRESS) &&
           verifier.VerifyString(address()) &&
           VerifyField<vsm::Vector2>(verifier, VT_COORDINATES) &&
           VerifyField<uint32_t>(verifier, VT_TIMESTAMP) &&
           verifier.EndTable();
  }
};

struct NodeInfoBuilder {
  typedef NodeInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(NodeInfo::VT_NAME, name);
  }
  void add_address(flatbuffers::Offset<flatbuffers::String> address) {
    fbb_.AddOffset(NodeInfo::VT_ADDRESS, address);
  }
  void add_coordinates(const vsm::Vector2 *coordinates) {
    fbb_.AddStruct(NodeInfo::VT_COORDINATES, coordinates);
  }
  void add_timestamp(uint32_t timestamp) {
    fbb_.AddElement<uint32_t>(NodeInfo::VT_TIMESTAMP, timestamp, 0);
  }
  explicit NodeInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<NodeInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<NodeInfo>(end);
    fbb_.Required(o, NodeInfo::VT_ADDRESS);
    return o;
  }
};

inline flatbuffers::Offset<NodeInfo> CreateNodeInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> address = 0,
    const vsm::Vector2 *coordinates = 0,
    uint32_t timestamp = 0) {
  NodeInfoBuilder builder_(_fbb);
  builder_.add_timestamp(timestamp);
  builder_.add_coordinates(coordinates);
  builder_.add_address(address);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<NodeInfo> CreateNodeInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *address = nullptr,
    const vsm::Vector2 *coordinates = 0,
    uint32_t timestamp = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto address__ = address ? _fbb.CreateString(address) : 0;
  return vsm::CreateNodeInfo(
      _fbb,
      name__,
      address__,
      coordinates,
      timestamp);
}

struct Message FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MessageBuilder Builder;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "vsm.Message";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RANGE = 4,
    VT_EXPIRY = 6,
    VT_PRIORITY = 8,
    VT_SOURCE = 10,
    VT_PEERS = 12,
    VT_STATES = 14
  };
  float range() const {
    return GetField<float>(VT_RANGE, 0.0f);
  }
  bool mutate_range(float _range) {
    return SetField<float>(VT_RANGE, _range, 0.0f);
  }
  uint32_t expiry() const {
    return GetField<uint32_t>(VT_EXPIRY, 0);
  }
  bool mutate_expiry(uint32_t _expiry) {
    return SetField<uint32_t>(VT_EXPIRY, _expiry, 0);
  }
  uint8_t priority() const {
    return GetField<uint8_t>(VT_PRIORITY, 0);
  }
  bool mutate_priority(uint8_t _priority) {
    return SetField<uint8_t>(VT_PRIORITY, _priority, 0);
  }
  const vsm::NodeInfo *source() const {
    return GetPointer<const vsm::NodeInfo *>(VT_SOURCE);
  }
  vsm::NodeInfo *mutable_source() {
    return GetPointer<vsm::NodeInfo *>(VT_SOURCE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<vsm::NodeInfo>> *peers() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<vsm::NodeInfo>> *>(VT_PEERS);
  }
  flatbuffers::Vector<flatbuffers::Offset<vsm::NodeInfo>> *mutable_peers() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<vsm::NodeInfo>> *>(VT_PEERS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<vsm::State>> *states() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<vsm::State>> *>(VT_STATES);
  }
  flatbuffers::Vector<flatbuffers::Offset<vsm::State>> *mutable_states() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<vsm::State>> *>(VT_STATES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_RANGE) &&
           VerifyField<uint32_t>(verifier, VT_EXPIRY) &&
           VerifyField<uint8_t>(verifier, VT_PRIORITY) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyTable(source()) &&
           VerifyOffset(verifier, VT_PEERS) &&
           verifier.VerifyVector(peers()) &&
           verifier.VerifyVectorOfTables(peers()) &&
           VerifyOffset(verifier, VT_STATES) &&
           verifier.VerifyVector(states()) &&
           verifier.VerifyVectorOfTables(states()) &&
           verifier.EndTable();
  }
};

struct MessageBuilder {
  typedef Message Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_range(float range) {
    fbb_.AddElement<float>(Message::VT_RANGE, range, 0.0f);
  }
  void add_expiry(uint32_t expiry) {
    fbb_.AddElement<uint32_t>(Message::VT_EXPIRY, expiry, 0);
  }
  void add_priority(uint8_t priority) {
    fbb_.AddElement<uint8_t>(Message::VT_PRIORITY, priority, 0);
  }
  void add_source(flatbuffers::Offset<vsm::NodeInfo> source) {
    fbb_.AddOffset(Message::VT_SOURCE, source);
  }
  void add_peers(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<vsm::NodeInfo>>> peers) {
    fbb_.AddOffset(Message::VT_PEERS, peers);
  }
  void add_states(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<vsm::State>>> states) {
    fbb_.AddOffset(Message::VT_STATES, states);
  }
  explicit MessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline flatbuffers::Offset<Message> CreateMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    float range = 0.0f,
    uint32_t expiry = 0,
    uint8_t priority = 0,
    flatbuffers::Offset<vsm::NodeInfo> source = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<vsm::NodeInfo>>> peers = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<vsm::State>>> states = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_states(states);
  builder_.add_peers(peers);
  builder_.add_source(source);
  builder_.add_expiry(expiry);
  builder_.add_range(range);
  builder_.add_priority(priority);
  return builder_.Finish();
}

inline flatbuffers::Offset<Message> CreateMessageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    float range = 0.0f,
    uint32_t expiry = 0,
    uint8_t priority = 0,
    flatbuffers::Offset<vsm::NodeInfo> source = 0,
    std::vector<flatbuffers::Offset<vsm::NodeInfo>> *peers = nullptr,
    std::vector<flatbuffers::Offset<vsm::State>> *states = nullptr) {
  auto peers__ = peers ? _fbb.CreateVectorOfSortedTables<vsm::NodeInfo>(peers) : 0;
  auto states__ = states ? _fbb.CreateVectorOfSortedTables<vsm::State>(states) : 0;
  return vsm::CreateMessage(
      _fbb,
      range,
      expiry,
      priority,
      source,
      peers__,
      states__);
}

struct State FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef StateBuilder Builder;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "vsm.State";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SYNC_MODE = 4,
    VT_EXPIRY = 6,
    VT_NAME = 8,
    VT_TYPE = 10,
    VT_DATA = 12
  };
  vsm::SyncMode sync_mode() const {
    return static_cast<vsm::SyncMode>(GetField<uint8_t>(VT_SYNC_MODE, 0));
  }
  bool mutate_sync_mode(vsm::SyncMode _sync_mode) {
    return SetField<uint8_t>(VT_SYNC_MODE, static_cast<uint8_t>(_sync_mode), 0);
  }
  uint32_t expiry() const {
    return GetField<uint32_t>(VT_EXPIRY, 0);
  }
  bool mutate_expiry(uint32_t _expiry) {
    return SetField<uint32_t>(VT_EXPIRY, _expiry, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  flatbuffers::String *mutable_name() {
    return GetPointer<flatbuffers::String *>(VT_NAME);
  }
  bool KeyCompareLessThan(const State *o) const {
    return *name() < *o->name();
  }
  int KeyCompareWithValue(const char *val) const {
    return strcmp(name()->c_str(), val);
  }
  uint32_t type() const {
    return GetField<uint32_t>(VT_TYPE, 0);
  }
  bool mutate_type(uint32_t _type) {
    return SetField<uint32_t>(VT_TYPE, _type, 0);
  }
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  flatbuffers::Vector<uint8_t> *mutable_data() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SYNC_MODE) &&
           VerifyField<uint32_t>(verifier, VT_EXPIRY) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint32_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct StateBuilder {
  typedef State Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sync_mode(vsm::SyncMode sync_mode) {
    fbb_.AddElement<uint8_t>(State::VT_SYNC_MODE, static_cast<uint8_t>(sync_mode), 0);
  }
  void add_expiry(uint32_t expiry) {
    fbb_.AddElement<uint32_t>(State::VT_EXPIRY, expiry, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(State::VT_NAME, name);
  }
  void add_type(uint32_t type) {
    fbb_.AddElement<uint32_t>(State::VT_TYPE, type, 0);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(State::VT_DATA, data);
  }
  explicit StateBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<State> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<State>(end);
    fbb_.Required(o, State::VT_NAME);
    return o;
  }
};

inline flatbuffers::Offset<State> CreateState(
    flatbuffers::FlatBufferBuilder &_fbb,
    vsm::SyncMode sync_mode = vsm::SyncMode::AUTHORITY,
    uint32_t expiry = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    uint32_t type = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
  StateBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_type(type);
  builder_.add_name(name);
  builder_.add_expiry(expiry);
  builder_.add_sync_mode(sync_mode);
  return builder_.Finish();
}

inline flatbuffers::Offset<State> CreateStateDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    vsm::SyncMode sync_mode = vsm::SyncMode::AUTHORITY,
    uint32_t expiry = 0,
    const char *name = nullptr,
    uint32_t type = 0,
    const std::vector<uint8_t> *data = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return vsm::CreateState(
      _fbb,
      sync_mode,
      expiry,
      name__,
      type,
      data__);
}

}  // namespace vsm

#endif  // FLATBUFFERS_GENERATED_MSGTYPES_VSM_H_
