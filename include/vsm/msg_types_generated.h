// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MSGTYPES_VSM_H_
#define FLATBUFFERS_GENERATED_MSGTYPES_VSM_H_

#include "flatbuffers/flatbuffers.h"

namespace vsm {

struct Message;
struct MessageBuilder;
struct MessageT;

struct NodeInfo;
struct NodeInfoBuilder;
struct NodeInfoT;

struct Entity;
struct EntityBuilder;
struct EntityT;

enum class Filter : uint8_t {
  ALL = 0,
  NEAREST = 1,
  MIN = ALL,
  MAX = NEAREST
};

inline const Filter (&EnumValuesFilter())[2] {
  static const Filter values[] = {
    Filter::ALL,
    Filter::NEAREST
  };
  return values;
}

inline const char * const *EnumNamesFilter() {
  static const char * const names[3] = {
    "ALL",
    "NEAREST",
    nullptr
  };
  return names;
}

inline const char *EnumNameFilter(Filter e) {
  if (flatbuffers::IsOutRange(e, Filter::ALL, Filter::NEAREST)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesFilter()[index];
}

struct MessageT : public flatbuffers::NativeTable {
  typedef Message TableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "vsm.MessageT";
  }
  uint32_t timestamp = 0;
  uint32_t hops = 1;
  std::unique_ptr<vsm::NodeInfoT> source{};
  std::vector<std::unique_ptr<vsm::NodeInfoT>> peers{};
  std::vector<std::unique_ptr<vsm::EntityT>> entities{};
};

struct Message FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MessageT NativeTableType;
  typedef MessageBuilder Builder;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "vsm.Message";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIMESTAMP = 4,
    VT_HOPS = 6,
    VT_SOURCE = 8,
    VT_PEERS = 10,
    VT_ENTITIES = 12
  };
  uint32_t timestamp() const {
    return GetField<uint32_t>(VT_TIMESTAMP, 0);
  }
  bool mutate_timestamp(uint32_t _timestamp) {
    return SetField<uint32_t>(VT_TIMESTAMP, _timestamp, 0);
  }
  uint32_t hops() const {
    return GetField<uint32_t>(VT_HOPS, 1);
  }
  bool mutate_hops(uint32_t _hops) {
    return SetField<uint32_t>(VT_HOPS, _hops, 1);
  }
  const vsm::NodeInfo *source() const {
    return GetPointer<const vsm::NodeInfo *>(VT_SOURCE);
  }
  vsm::NodeInfo *mutable_source() {
    return GetPointer<vsm::NodeInfo *>(VT_SOURCE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<vsm::NodeInfo>> *peers() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<vsm::NodeInfo>> *>(VT_PEERS);
  }
  flatbuffers::Vector<flatbuffers::Offset<vsm::NodeInfo>> *mutable_peers() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<vsm::NodeInfo>> *>(VT_PEERS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<vsm::Entity>> *entities() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<vsm::Entity>> *>(VT_ENTITIES);
  }
  flatbuffers::Vector<flatbuffers::Offset<vsm::Entity>> *mutable_entities() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<vsm::Entity>> *>(VT_ENTITIES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_TIMESTAMP) &&
           VerifyField<uint32_t>(verifier, VT_HOPS) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyTable(source()) &&
           VerifyOffset(verifier, VT_PEERS) &&
           verifier.VerifyVector(peers()) &&
           verifier.VerifyVectorOfTables(peers()) &&
           VerifyOffset(verifier, VT_ENTITIES) &&
           verifier.VerifyVector(entities()) &&
           verifier.VerifyVectorOfTables(entities()) &&
           verifier.EndTable();
  }
  MessageT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(MessageT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Message> Pack(flatbuffers::FlatBufferBuilder &_fbb, const MessageT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct MessageBuilder {
  typedef Message Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_timestamp(uint32_t timestamp) {
    fbb_.AddElement<uint32_t>(Message::VT_TIMESTAMP, timestamp, 0);
  }
  void add_hops(uint32_t hops) {
    fbb_.AddElement<uint32_t>(Message::VT_HOPS, hops, 1);
  }
  void add_source(flatbuffers::Offset<vsm::NodeInfo> source) {
    fbb_.AddOffset(Message::VT_SOURCE, source);
  }
  void add_peers(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<vsm::NodeInfo>>> peers) {
    fbb_.AddOffset(Message::VT_PEERS, peers);
  }
  void add_entities(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<vsm::Entity>>> entities) {
    fbb_.AddOffset(Message::VT_ENTITIES, entities);
  }
  explicit MessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline flatbuffers::Offset<Message> CreateMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t timestamp = 0,
    uint32_t hops = 1,
    flatbuffers::Offset<vsm::NodeInfo> source = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<vsm::NodeInfo>>> peers = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<vsm::Entity>>> entities = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_entities(entities);
  builder_.add_peers(peers);
  builder_.add_source(source);
  builder_.add_hops(hops);
  builder_.add_timestamp(timestamp);
  return builder_.Finish();
}

inline flatbuffers::Offset<Message> CreateMessageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t timestamp = 0,
    uint32_t hops = 1,
    flatbuffers::Offset<vsm::NodeInfo> source = 0,
    std::vector<flatbuffers::Offset<vsm::NodeInfo>> *peers = nullptr,
    std::vector<flatbuffers::Offset<vsm::Entity>> *entities = nullptr) {
  auto peers__ = peers ? _fbb.CreateVectorOfSortedTables<vsm::NodeInfo>(peers) : 0;
  auto entities__ = entities ? _fbb.CreateVectorOfSortedTables<vsm::Entity>(entities) : 0;
  return vsm::CreateMessage(
      _fbb,
      timestamp,
      hops,
      source,
      peers__,
      entities__);
}

flatbuffers::Offset<Message> CreateMessage(flatbuffers::FlatBufferBuilder &_fbb, const MessageT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct NodeInfoT : public flatbuffers::NativeTable {
  typedef NodeInfo TableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "vsm.NodeInfoT";
  }
  std::string name{};
  std::string address{};
  std::vector<float> coordinates{};
  uint32_t group_mask = 4294967295;
  uint32_t sequence = 0;
};

struct NodeInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef NodeInfoT NativeTableType;
  typedef NodeInfoBuilder Builder;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "vsm.NodeInfo";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_ADDRESS = 6,
    VT_COORDINATES = 8,
    VT_GROUP_MASK = 10,
    VT_SEQUENCE = 12
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  flatbuffers::String *mutable_name() {
    return GetPointer<flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *address() const {
    return GetPointer<const flatbuffers::String *>(VT_ADDRESS);
  }
  flatbuffers::String *mutable_address() {
    return GetPointer<flatbuffers::String *>(VT_ADDRESS);
  }
  bool KeyCompareLessThan(const NodeInfo *o) const {
    return *address() < *o->address();
  }
  int KeyCompareWithValue(const char *val) const {
    return strcmp(address()->c_str(), val);
  }
  const flatbuffers::Vector<float> *coordinates() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_COORDINATES);
  }
  flatbuffers::Vector<float> *mutable_coordinates() {
    return GetPointer<flatbuffers::Vector<float> *>(VT_COORDINATES);
  }
  uint32_t group_mask() const {
    return GetField<uint32_t>(VT_GROUP_MASK, 4294967295);
  }
  bool mutate_group_mask(uint32_t _group_mask) {
    return SetField<uint32_t>(VT_GROUP_MASK, _group_mask, 4294967295);
  }
  uint32_t sequence() const {
    return GetField<uint32_t>(VT_SEQUENCE, 0);
  }
  bool mutate_sequence(uint32_t _sequence) {
    return SetField<uint32_t>(VT_SEQUENCE, _sequence, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffsetRequired(verifier, VT_ADDRESS) &&
           verifier.VerifyString(address()) &&
           VerifyOffset(verifier, VT_COORDINATES) &&
           verifier.VerifyVector(coordinates()) &&
           VerifyField<uint32_t>(verifier, VT_GROUP_MASK) &&
           VerifyField<uint32_t>(verifier, VT_SEQUENCE) &&
           verifier.EndTable();
  }
  NodeInfoT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(NodeInfoT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<NodeInfo> Pack(flatbuffers::FlatBufferBuilder &_fbb, const NodeInfoT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct NodeInfoBuilder {
  typedef NodeInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(NodeInfo::VT_NAME, name);
  }
  void add_address(flatbuffers::Offset<flatbuffers::String> address) {
    fbb_.AddOffset(NodeInfo::VT_ADDRESS, address);
  }
  void add_coordinates(flatbuffers::Offset<flatbuffers::Vector<float>> coordinates) {
    fbb_.AddOffset(NodeInfo::VT_COORDINATES, coordinates);
  }
  void add_group_mask(uint32_t group_mask) {
    fbb_.AddElement<uint32_t>(NodeInfo::VT_GROUP_MASK, group_mask, 4294967295);
  }
  void add_sequence(uint32_t sequence) {
    fbb_.AddElement<uint32_t>(NodeInfo::VT_SEQUENCE, sequence, 0);
  }
  explicit NodeInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<NodeInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<NodeInfo>(end);
    fbb_.Required(o, NodeInfo::VT_ADDRESS);
    return o;
  }
};

inline flatbuffers::Offset<NodeInfo> CreateNodeInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> address = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> coordinates = 0,
    uint32_t group_mask = 4294967295,
    uint32_t sequence = 0) {
  NodeInfoBuilder builder_(_fbb);
  builder_.add_sequence(sequence);
  builder_.add_group_mask(group_mask);
  builder_.add_coordinates(coordinates);
  builder_.add_address(address);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<NodeInfo> CreateNodeInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *address = nullptr,
    const std::vector<float> *coordinates = nullptr,
    uint32_t group_mask = 4294967295,
    uint32_t sequence = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto address__ = address ? _fbb.CreateString(address) : 0;
  auto coordinates__ = coordinates ? _fbb.CreateVector<float>(*coordinates) : 0;
  return vsm::CreateNodeInfo(
      _fbb,
      name__,
      address__,
      coordinates__,
      group_mask,
      sequence);
}

flatbuffers::Offset<NodeInfo> CreateNodeInfo(flatbuffers::FlatBufferBuilder &_fbb, const NodeInfoT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct EntityT : public flatbuffers::NativeTable {
  typedef Entity TableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "vsm.EntityT";
  }
  std::string name{};
  std::vector<float> coordinates{};
  vsm::Filter filter = vsm::Filter::ALL;
  uint32_t hop_limit = 0;
  float range = 0.0f;
  uint32_t expiry = 4294967295;
  std::vector<uint8_t> data{};
};

struct Entity FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EntityT NativeTableType;
  typedef EntityBuilder Builder;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "vsm.Entity";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_COORDINATES = 6,
    VT_FILTER = 8,
    VT_HOP_LIMIT = 10,
    VT_RANGE = 12,
    VT_EXPIRY = 14,
    VT_DATA = 16
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  flatbuffers::String *mutable_name() {
    return GetPointer<flatbuffers::String *>(VT_NAME);
  }
  bool KeyCompareLessThan(const Entity *o) const {
    return *name() < *o->name();
  }
  int KeyCompareWithValue(const char *val) const {
    return strcmp(name()->c_str(), val);
  }
  const flatbuffers::Vector<float> *coordinates() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_COORDINATES);
  }
  flatbuffers::Vector<float> *mutable_coordinates() {
    return GetPointer<flatbuffers::Vector<float> *>(VT_COORDINATES);
  }
  vsm::Filter filter() const {
    return static_cast<vsm::Filter>(GetField<uint8_t>(VT_FILTER, 0));
  }
  bool mutate_filter(vsm::Filter _filter) {
    return SetField<uint8_t>(VT_FILTER, static_cast<uint8_t>(_filter), 0);
  }
  uint32_t hop_limit() const {
    return GetField<uint32_t>(VT_HOP_LIMIT, 0);
  }
  bool mutate_hop_limit(uint32_t _hop_limit) {
    return SetField<uint32_t>(VT_HOP_LIMIT, _hop_limit, 0);
  }
  float range() const {
    return GetField<float>(VT_RANGE, 0.0f);
  }
  bool mutate_range(float _range) {
    return SetField<float>(VT_RANGE, _range, 0.0f);
  }
  uint32_t expiry() const {
    return GetField<uint32_t>(VT_EXPIRY, 4294967295);
  }
  bool mutate_expiry(uint32_t _expiry) {
    return SetField<uint32_t>(VT_EXPIRY, _expiry, 4294967295);
  }
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  flatbuffers::Vector<uint8_t> *mutable_data() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_COORDINATES) &&
           verifier.VerifyVector(coordinates()) &&
           VerifyField<uint8_t>(verifier, VT_FILTER) &&
           VerifyField<uint32_t>(verifier, VT_HOP_LIMIT) &&
           VerifyField<float>(verifier, VT_RANGE) &&
           VerifyField<uint32_t>(verifier, VT_EXPIRY) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
  EntityT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(EntityT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Entity> Pack(flatbuffers::FlatBufferBuilder &_fbb, const EntityT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct EntityBuilder {
  typedef Entity Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Entity::VT_NAME, name);
  }
  void add_coordinates(flatbuffers::Offset<flatbuffers::Vector<float>> coordinates) {
    fbb_.AddOffset(Entity::VT_COORDINATES, coordinates);
  }
  void add_filter(vsm::Filter filter) {
    fbb_.AddElement<uint8_t>(Entity::VT_FILTER, static_cast<uint8_t>(filter), 0);
  }
  void add_hop_limit(uint32_t hop_limit) {
    fbb_.AddElement<uint32_t>(Entity::VT_HOP_LIMIT, hop_limit, 0);
  }
  void add_range(float range) {
    fbb_.AddElement<float>(Entity::VT_RANGE, range, 0.0f);
  }
  void add_expiry(uint32_t expiry) {
    fbb_.AddElement<uint32_t>(Entity::VT_EXPIRY, expiry, 4294967295);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(Entity::VT_DATA, data);
  }
  explicit EntityBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Entity> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Entity>(end);
    fbb_.Required(o, Entity::VT_NAME);
    return o;
  }
};

inline flatbuffers::Offset<Entity> CreateEntity(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> coordinates = 0,
    vsm::Filter filter = vsm::Filter::ALL,
    uint32_t hop_limit = 0,
    float range = 0.0f,
    uint32_t expiry = 4294967295,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
  EntityBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_expiry(expiry);
  builder_.add_range(range);
  builder_.add_hop_limit(hop_limit);
  builder_.add_coordinates(coordinates);
  builder_.add_name(name);
  builder_.add_filter(filter);
  return builder_.Finish();
}

inline flatbuffers::Offset<Entity> CreateEntityDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const std::vector<float> *coordinates = nullptr,
    vsm::Filter filter = vsm::Filter::ALL,
    uint32_t hop_limit = 0,
    float range = 0.0f,
    uint32_t expiry = 4294967295,
    const std::vector<uint8_t> *data = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto coordinates__ = coordinates ? _fbb.CreateVector<float>(*coordinates) : 0;
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return vsm::CreateEntity(
      _fbb,
      name__,
      coordinates__,
      filter,
      hop_limit,
      range,
      expiry,
      data__);
}

flatbuffers::Offset<Entity> CreateEntity(flatbuffers::FlatBufferBuilder &_fbb, const EntityT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline MessageT *Message::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<MessageT>(new MessageT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Message::UnPackTo(MessageT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = timestamp(); _o->timestamp = _e; }
  { auto _e = hops(); _o->hops = _e; }
  { auto _e = source(); if (_e) _o->source = std::unique_ptr<vsm::NodeInfoT>(_e->UnPack(_resolver)); }
  { auto _e = peers(); if (_e) { _o->peers.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->peers[_i] = std::unique_ptr<vsm::NodeInfoT>(_e->Get(_i)->UnPack(_resolver)); } } }
  { auto _e = entities(); if (_e) { _o->entities.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->entities[_i] = std::unique_ptr<vsm::EntityT>(_e->Get(_i)->UnPack(_resolver)); } } }
}

inline flatbuffers::Offset<Message> Message::Pack(flatbuffers::FlatBufferBuilder &_fbb, const MessageT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateMessage(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Message> CreateMessage(flatbuffers::FlatBufferBuilder &_fbb, const MessageT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const MessageT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _timestamp = _o->timestamp;
  auto _hops = _o->hops;
  auto _source = _o->source ? CreateNodeInfo(_fbb, _o->source.get(), _rehasher) : 0;
  auto _peers = _o->peers.size() ? _fbb.CreateVector<flatbuffers::Offset<vsm::NodeInfo>> (_o->peers.size(), [](size_t i, _VectorArgs *__va) { return CreateNodeInfo(*__va->__fbb, __va->__o->peers[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _entities = _o->entities.size() ? _fbb.CreateVector<flatbuffers::Offset<vsm::Entity>> (_o->entities.size(), [](size_t i, _VectorArgs *__va) { return CreateEntity(*__va->__fbb, __va->__o->entities[i].get(), __va->__rehasher); }, &_va ) : 0;
  return vsm::CreateMessage(
      _fbb,
      _timestamp,
      _hops,
      _source,
      _peers,
      _entities);
}

inline NodeInfoT *NodeInfo::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<NodeInfoT>(new NodeInfoT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void NodeInfo::UnPackTo(NodeInfoT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = name(); if (_e) _o->name = _e->str(); }
  { auto _e = address(); if (_e) _o->address = _e->str(); }
  { auto _e = coordinates(); if (_e) { _o->coordinates.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->coordinates[_i] = _e->Get(_i); } } }
  { auto _e = group_mask(); _o->group_mask = _e; }
  { auto _e = sequence(); _o->sequence = _e; }
}

inline flatbuffers::Offset<NodeInfo> NodeInfo::Pack(flatbuffers::FlatBufferBuilder &_fbb, const NodeInfoT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateNodeInfo(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<NodeInfo> CreateNodeInfo(flatbuffers::FlatBufferBuilder &_fbb, const NodeInfoT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const NodeInfoT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  auto _address = _fbb.CreateString(_o->address);
  auto _coordinates = _o->coordinates.size() ? _fbb.CreateVector(_o->coordinates) : 0;
  auto _group_mask = _o->group_mask;
  auto _sequence = _o->sequence;
  return vsm::CreateNodeInfo(
      _fbb,
      _name,
      _address,
      _coordinates,
      _group_mask,
      _sequence);
}

inline EntityT *Entity::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<EntityT>(new EntityT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Entity::UnPackTo(EntityT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = name(); if (_e) _o->name = _e->str(); }
  { auto _e = coordinates(); if (_e) { _o->coordinates.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->coordinates[_i] = _e->Get(_i); } } }
  { auto _e = filter(); _o->filter = _e; }
  { auto _e = hop_limit(); _o->hop_limit = _e; }
  { auto _e = range(); _o->range = _e; }
  { auto _e = expiry(); _o->expiry = _e; }
  { auto _e = data(); if (_e) { _o->data.resize(_e->size()); std::copy(_e->begin(), _e->end(), _o->data.begin()); } }
}

inline flatbuffers::Offset<Entity> Entity::Pack(flatbuffers::FlatBufferBuilder &_fbb, const EntityT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateEntity(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Entity> CreateEntity(flatbuffers::FlatBufferBuilder &_fbb, const EntityT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const EntityT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _name = _fbb.CreateString(_o->name);
  auto _coordinates = _o->coordinates.size() ? _fbb.CreateVector(_o->coordinates) : 0;
  auto _filter = _o->filter;
  auto _hop_limit = _o->hop_limit;
  auto _range = _o->range;
  auto _expiry = _o->expiry;
  auto _data = _o->data.size() ? _fbb.CreateVector(_o->data) : 0;
  return vsm::CreateEntity(
      _fbb,
      _name,
      _coordinates,
      _filter,
      _hop_limit,
      _range,
      _expiry,
      _data);
}

}  // namespace vsm

#endif  // FLATBUFFERS_GENERATED_MSGTYPES_VSM_H_
